services:
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"      # MinIO API
      - "9001:9001"      # MinIO Console UI
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
    environment:
      CHROMA_DIR: /app/data/gold/chroma
      MINIO_URL: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: mydata
    depends_on:
      minio:
        condition: service_healthy

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-init
    restart: "no"
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}          # <-- added here
      AIRFLOW_HOME: /opt/airflow
    volumes:
      - ./airflow/airflow.db:/opt/airflow/airflow.db
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/src
      - ./data:/opt/data
    entrypoint: >
      /bin/bash -c "
        echo 'üîç Using SQLite at /opt/airflow/airflow.db' && \
        airflow db init && echo '‚úÖ DB Initialized' && \
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin && \
        echo '‚úÖ Admin user created: admin / admin'
      "

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-webserver
    restart: always
    depends_on:
      - airflow-init
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}          # <-- added here
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW_HOME: /opt/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/src
      - ./airflow/airflow.db:/opt/airflow/airflow.db
      - ./data:/opt/data
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow-scheduler
    restart: always
    depends_on:
      - airflow-webserver
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${SECRET_KEY}          # <-- added here
      AIRFLOW_HOME: /opt/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src:/opt/src
      - ./airflow/airflow.db:/opt/airflow/airflow.db
      - ./data:/opt/data
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8793/health"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  minio-data:
